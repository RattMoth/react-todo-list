{"version":3,"sources":["Item.js","ItemList.js","Input.js","About.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","list","toggleDone","removeItem","react_default","a","createElement","className","type","onChange","bind","id","style","textDecoration","complete","title","onClick","ItemList","filter","val","index","map","src_Item_0","key","Input","_this$props","this","props","addToList","onInputChange","display","onSubmit","flex","placeholder","value","todoName","height","Component","About","Fragment","headerStyle","background","color","textAlign","padding","linkStyle","Header","Link","to","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","item","toConsumableArray","e","preventDefault","newItem","Math","random","concat","target","assertThisInitialized","_this2","fetch","then","response","json","items","_this3","length","BrowserRouter","src_Header","Route","exact","path","render","src_Input","src_ItemList","component","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e37587e6.chunk.js","sourcesContent":["import React from 'react';\nimport './Item.css';\n\nconst Item = ({ list, toggleDone, removeItem }) => {\n  const setDone = () => {\n    return {\n      textDecoration: list.complete ? 'line-through' : 'none'\n    };\n  };\n\n  return (\n    <div className=\"item-line\">\n      <input\n        className=\"alignCenter checkBox\"\n        type=\"checkbox\"\n        onChange={toggleDone.bind(this, list.id)}\n      />\n      <p className=\"alignCenter\" style={setDone()}>\n        {list.title}\n      </p>\n      <button onClick={removeItem.bind(this, list.id)} className=\"delBtn\">\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default Item;\n","import React from 'react';\nimport Item from './Item';\n\nconst ItemList = ({ list, removeItem, toggleDone }) => {\n  return (\n    list\n      .filter((val, index) => index < 10)\n      // Filter limits the number of Items didsplayed on the page. If an Item is deleted it is replaced with the next array item\n      .map(list => (\n        <Item\n          removeItem={removeItem}\n          toggleDone={toggleDone}\n          key={list.id}\n          list={list}\n        />\n      ))\n  );\n};\n\nexport default ItemList;\n","import React, { Component } from 'react';\n\nclass Input extends Component {\n  // state = {\n  //   todoName: ''\n  // };\n\n  // onInputChange = e => {\n  //   e.preventDefault();\n  //   this.setState({ todoName: e.target.value });\n  // };\n\n  render() {\n    const { addToList, onInputChange } = this.props;\n    return (\n      <form style={{ display: 'flex' }} onSubmit={addToList}>\n        <input\n          style={{ flex: '10' }}\n          onChange={onInputChange}\n          type=\"text\"\n          placeholder=\"Enter New Item\"\n          value={this.props.todoName}\n        />\n        <button style={{ flex: '1', height: '3rem' }}>Enter</button>\n      </form>\n    );\n  }\n}\nexport default Input;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <React.Fragment>\n      <h1>About</h1>\n      <p>This is an About page for my todo app. Whatchu think huhhhh??</p>\n    </React.Fragment>\n  );\n};\n\nexport default About;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nfunction Header() {\n  return (\n    <header style={headerStyle}>\n      <h1>Todos</h1>\n      <Link style={linkStyle} to=\"/react-todo-list\">\n        Home\n      </Link>{' '}\n      |{' '}\n      <Link style={linkStyle} to=\"/react-todo-list/about\">\n        About\n      </Link>\n    </header>\n  );\n}\n\nconst headerStyle = {\n  background: '#333',\n  color: '#fff',\n  textAlign: 'center',\n  padding: '1rem'\n};\n\nconst linkStyle = {\n  color: '#fff',\n  textDecoration: 'none'\n};\n\nexport default Header;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport ItemList from './ItemList';\nimport Input from './Input';\nimport About from './About';\nimport Header from './Header';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todoName: '',\n      list: [1]\n    };\n\n    this.addToList = this.addToList.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  // Called on checkbox change. id bound in Item.js to always refer to the associated item's id\n  toggleDone = id => {\n    this.setState({\n      list: this.state.list.map(item => {\n        if (item.id === id) {\n          item.complete = !item.complete;\n        }\n        return item;\n      })\n    });\n  };\n\n  // Delete list item. Called on delete button click in Item.js.\n  // Filters list array and returns everything but the item with a matching id\n  removeItem = id => {\n    this.setState({\n      list: [...this.state.list.filter(item => item.id !== id)]\n    });\n  };\n\n  // Called on form submit. Input.js\n  addToList = e => {\n    e.preventDefault();\n    const newItem = {\n      id: Math.random(),\n      title: this.state.todoName,\n      complete: false\n    };\n    this.setState({ todoName: '', list: [...this.state.list, newItem] });\n  };\n\n  onInputChange = e => {\n    e.preventDefault();\n    this.setState({ todoName: e.target.value });\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then(response => response.json())\n      .then(items => this.setState({ list: items }));\n  }\n\n  render() {\n    if (this.state.list.length === 1) {\n      return <h1>Loading Todos...</h1>;\n    }\n    return (\n      <Router>\n        <div className=\"container\">\n          <Header />\n          <Route\n            exact\n            path=\"/react-todo-list\"\n            render={props => {\n              return (\n                <React.Fragment>\n                  <Input\n                    onInputChange={this.onInputChange}\n                    todoName={this.state.todoName}\n                    addToList={this.addToList}\n                  />\n                  <ItemList\n                    toggleDone={this.toggleDone}\n                    removeItem={this.removeItem}\n                    list={this.state.list}\n                  />\n                </React.Fragment>\n              );\n            }}\n          />\n          <Route path=\"react-todo-list/about\" component={About} />\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\n//Can now update this.state.list by calling addToList on Input.js's enter button\n//  This creates newList from the already existing this.state.list values using spread\n//  operator. Since state cannot be mutatated outside of setState, the new input value\n//  is pushed to newList which is then set as state using setState.\n//ItemList.js iterates through this.state.list and returns an item component for each\n//ToDo: Add delete button functionality\n//      Center text and style page\n//      Check React lifecycle page for help removing Item components via delete button\n\n//TODO Discover why remove function does not console log on delete btton click.\n//  ANSWER: Prop was not passed within removeItem function\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}