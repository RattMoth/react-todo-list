{"version":3,"sources":["Item.js","ItemList.js","Input.js","About.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["Item","_ref","list","toggleDone","removeItem","react_default","a","createElement","className","type","onChange","bind","id","style","textDecoration","complete","title","onClick","ItemList","filter","val","index","map","src_Item_0","key","Input","_this$props","this","props","addToList","onInputChange","display","maxWidth","margin","onSubmit","flex","placeholder","value","todoName","height","paddingRight","paddingLeft","Component","backgroundStyle","backgroundColor","padding","About","Fragment","color","href","headerStyle","background","textAlign","width","linkStyle","cursor","center","justifyContent","Header","changeRoute","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","setState","state","item","toConsumableArray","e","preventDefault","length","alert","newItem","Math","random","concat","target","location","route","assertThisInitialized","_this2","fetch","then","response","json","items","src_Header","src_Input","src_ItemList","src_About","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ae470c4e.chunk.js","sourcesContent":["import React from 'react';\nimport './Item.css';\n\nconst Item = ({ list, toggleDone, removeItem }) => {\n  const setDone = () => {\n    return {\n      textDecoration: list.complete ? 'line-through' : 'none'\n    };\n  };\n\n  return (\n    <div className=\"item-line\">\n      <input\n        className=\"alignCenter checkBox\"\n        type=\"checkbox\"\n        onChange={toggleDone.bind(this, list.id)}\n      />\n      <p className=\"alignCenter\" style={setDone()}>\n        {list.title}\n      </p>\n      <button\n        onClick={removeItem.bind(this, list.id)}\n        className=\"delBtn alignCenter\"\n      >\n        Delete\n      </button>\n    </div>\n  );\n};\n\nexport default Item;\n","import React from 'react';\nimport Item from './Item';\n\nconst ItemList = ({ list, removeItem, toggleDone }) => {\n  return (\n    list\n      .filter((val, index) => index < 10)\n      // Filter limits the number of Items didsplayed on the page. If an Item is deleted it is replaced with the next array item\n      .map(list => (\n        <Item\n          removeItem={removeItem}\n          toggleDone={toggleDone}\n          key={list.id}\n          list={list}\n        />\n      ))\n  );\n};\n\nexport default ItemList;\n","import React, { Component } from 'react';\n\nclass Input extends Component {\n  render() {\n    const { addToList, onInputChange } = this.props;\n    return (\n      <form\n        style={{\n          display: 'flex',\n          maxWidth: '80%',\n          margin: 'auto'\n        }}\n        onSubmit={addToList}\n      >\n        <input\n          style={{ flex: '10' }}\n          onChange={onInputChange}\n          type=\"text\"\n          placeholder=\"Enter New Item\"\n          value={this.props.todoName}\n        />\n        <button\n          style={{\n            flex: '1',\n            height: '3rem',\n            paddingRight: '1rem',\n            paddingLeft: '1rem'\n          }}\n        >\n          Enter\n        </button>\n      </form>\n    );\n  }\n}\nexport default Input;\n","import React from 'react';\n\nconst About = () => {\n  return (\n    <React.Fragment>\n      <h1 style={{ maxWidth: '80%', margin: 'auto', color: 'white' }}>About</h1>\n      <p style={backgroundStyle}>\n        This is a simple Todo app created with ReactJS. Each todo item is\n        imported from{' '}\n        <a href=\"https://jsonplaceholder.typicode.com/todos\">\n          jsonplaceholder.com\n        </a>\n        . Because this file contains 200 todo items, the number of displayed\n        items was limited to 10 at a time, in order to avoid clutter. As each\n        item is removed a new item from farther down the list is called to fill\n        the empty spot.\n        <br />\n        <br />\n        All source code can be found{' '}\n        <a href=\"https://github.com/RattMoth/react-todo-list\">\n          here at my GitHub page.\n        </a>\n      </p>\n    </React.Fragment>\n  );\n};\n\nconst backgroundStyle = {\n  backgroundColor: 'white',\n  padding: '1em 1em 3em 1em',\n  maxWidth: '80%',\n  margin: 'auto'\n};\n\nexport default About;\n","import React from 'react';\n\nconst Header = ({ changeRoute }) => {\n  return (\n    <header style={headerStyle}>\n      <h1>Todo List</h1>\n      <div style={center}>\n        <p style={linkStyle} onClick={() => changeRoute('home')}>\n          Home\n        </p>{' '}\n        |{' '}\n        <p style={linkStyle} onClick={() => changeRoute('about')}>\n          About\n        </p>\n      </div>\n    </header>\n  );\n};\n\nconst headerStyle = {\n  background: '#33363b',\n  color: '#fff',\n  textAlign: 'center',\n  padding: '1rem',\n  width: '80%',\n  margin: 'auto'\n};\n\nconst linkStyle = {\n  cursor: 'pointer',\n  color: '#fff',\n  textDecoration: 'none'\n};\n\nconst center = {\n  display: 'flex',\n  justifyContent: 'center'\n};\n\nexport default Header;\n","import React, { Component } from 'react';\n// import { BrowserRouter as Router, Route } from 'react-router-dom';\nimport './App.css';\nimport ItemList from './ItemList';\nimport Input from './Input';\nimport About from './About';\nimport Header from './Header';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      todoName: '',\n      list: [1],\n      route: 'home'\n    };\n\n    this.addToList = this.addToList.bind(this);\n    this.onInputChange = this.onInputChange.bind(this);\n  }\n\n  // Called on checkbox change. id bound in Item.js to always refer to the associated item's id\n  toggleDone = id => {\n    this.setState({\n      list: this.state.list.map(item => {\n        if (item.id === id) {\n          item.complete = !item.complete;\n        }\n        return item;\n      })\n    });\n  };\n\n  // Delete list item. Called on delete button click in Item.js.\n  // Filters list array and returns everything but the item with a matching id\n  removeItem = id => {\n    this.setState({\n      list: [...this.state.list.filter(item => item.id !== id)]\n    });\n  };\n\n  // Called on form submit. Input.js\n  addToList = e => {\n    e.preventDefault();\n    if (this.state.todoName.length === 0) {\n      alert('Please enter some text');\n    } else {\n      const newItem = {\n        id: Math.random(),\n        title: this.state.todoName,\n        complete: false\n      };\n      this.setState({ todoName: '', list: [newItem, ...this.state.list] });\n    }\n  };\n\n  onInputChange = e => {\n    e.preventDefault();\n    this.setState({ todoName: e.target.value });\n  };\n\n  changeRoute = location => {\n    this.setState({ route: location });\n  };\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/todos')\n      .then(response => response.json())\n      .then(items => this.setState({ list: items }));\n  }\n\n  render() {\n    if (this.state.list.length === 1) {\n      return <h1>Loading Todos...</h1>;\n    }\n    return (\n      <div className=\"App\">\n        <Header changeRoute={this.changeRoute} />\n        {this.state.route === 'home' ? (\n          <div>\n            <Input\n              onInputChange={this.onInputChange}\n              todoName={this.state.todoName}\n              addToList={this.addToList}\n            />\n            <ItemList\n              toggleDone={this.toggleDone}\n              removeItem={this.removeItem}\n              list={this.state.list}\n            />\n          </div>\n        ) : (\n          <About />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n//Can now update this.state.list by calling addToList on Input.js's enter button\n//  This creates newList from the already existing this.state.list values using spread\n//  operator. Since state cannot be mutatated outside of setState, the new input value\n//  is pushed to newList which is then set as state using setState.\n//ItemList.js iterates through this.state.list and returns an item component for each\n//ToDo: Add delete button functionality\n//      Center text and style page\n//      Check React lifecycle page for help removing Item components via delete button\n\n//TODO Discover why remove function does not console log on delete btton click.\n//  ANSWER: Prop was not passed within removeItem function\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n// import 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}